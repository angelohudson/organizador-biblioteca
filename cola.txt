0. Criando projeto
    0.1 npm i -g @nestjs/cli
    0.2 nest new <project-name>
    0.3 npm run start:dev: starta em modo de desenvolvimento (com hotreload)

1. Criando controller
    1.1 nest g controller <controller-name>
    1.2 Adiciona a nova controller ao item controllers do @Module do módulo em questão
    1.3 @Controller("<controller-name>") export class ControllerName {}
    1.4 controller method
    -    @Get()
    -    get(): string {
    -        return "";
    -    }  
    -    @Post()
    -    post(@Body() body: BodyType): string {
    -        return "";
    -    }  
    -    @Patch()
    -    post(): string {
    -        return "";
    -    }  
    1.5 instanciando serviços
    -   constructor(
    -       private booksService: BooksService,
    -   ) { }

2 Dto
    2.1 criando a pasta /src/Dto com os arquivos.dto.ts
    2.2 Validando Dtos:
        2.2.1 npm i class-validator && npm i class-transformer
        2.2.2 app.useGlobalPipes(new ValidationPipe());
        2.2.3 @IsNotEmpty()
        2.2.4 @IsString()
        2.2.5 @MinLength(2)
        2.2.6 @MaxLength(100)
        2.2.7 @IsNumber()
        2.2.8 @IsPositive()
        2.2.9 @Type(() => TypeClass): qaudno a propriedade for um objeto
        2.2.10 @ArrayMinSize(1): quando a propriedade for um array
        2.2.11 @ValidateNested({ each: true }): qaudno a propriedade for um objeto e nenhum pode ser nulo

3. MongoDB e Mongoose
    3.1 npm i --save @nestjs/mongoose
    3.2 no module importe MongooseModule.forRoot("mongodb://<server-address>/<db>", { useNewUrlParser: true, useUnifiedTopology: true })
    3.3 criar as pastas src/Mongo/Interfaces|Repository|Schemas
    3.4 na pasta Mongo/Schemas podemos colocar os arquivos <entity>.schema.ts onde estarão os schemas do banco
    -   export const EntitySchema = new Schema({
    -       propString: String,
    -       propNumber: Number
    -       propComplexArray: [SubEntitySchema],
    -   });
        3.4.1 adicionar o schema ao @Module -> imports e adicionar um nome identificado da collection
        MongooseModule.forFeature([{ name: 'entity', schema: EntitySchema }])
    3.5 na pasta Mongo/Interfaces podemos colocar os arquivos <entity>.interface.ts onde estenderá a classe Document e declará o modelo em si;
    -   import { Document, Schema } from "mongoose";
    -   export interface Entity extends Document {
    -       readonly _id: Schema.Types.ObjectId;
    -       readonly propString: string;
    -       readonly propNumber: number;
    -       readonly propComplexArray: SubEntitySchema[];
    -   }
    3.6 na pasta Mongo/Repository podemos colocar os arquivos <entity>.repository.ts;
    -   import { Document, Schema } from "mongoose";
    -   @Injectable()
        3.6.1 preciso criar o modelo da interface no construtor. Por esse modelo podemos fazer as operações no banco de dados
        -   export class BookRepository {
        -       constructor(@InjectModel("entity") private readonly entityModel: Model<Entity>) { }
        -   }
        3.6.2 as operações do repository são assicronas e devem retornar uma promise
        -   public async saveBook(newBook: BookDto) {
        -        const savedBook = new this.bookModel(newBook);
        -        return await savedBook.save();
        -    }
        
4. Services
    4.1 criar a pasta src/Services
    4.2 nest g service Books
    - @Injectable()
    - export class BooksService {}